#乗算レイヤ
class MulLayer:
    def __init__(self):
        self.x = None
        self.y = None

    def forward(self, x, y):
        self.x = x
        self.y = y                
        out = x * y

        return out

    def backward(self, dout):
        dx = dout * self.y
        dy = dout * self.x

        return dx, dy

#加算レイヤ
class AddLayer:
    def __init__(self):
        pass

    def forward(self, x, y):
        out = x + y

        return out

    def backward(self, dout):
        dx = dout * 1
        dy = dout * 1

        return dx, dy

#Reluレイヤ
class Relu:
  def __init__(self):
    self.mask = None

  def forward(self, x):
    self.mask = (x <= 0) # xが0以下であればTrue,それ以外はFalse
    out = x.copy()
    out[self.mask] = 0 # Trueのインデックスに代入が適用される

    return out

  def backward(self, dout):
    dout[self.mask] = 0 # xが0以下の時は0を流す、それ以外は値をそのまま流す
    dx = dout

    return dx

# Sigmoidレイヤ
class Sigmoid:
    def __init__(self):
        self.out = None

    def forward(self, x):
        out = 1 / (1 + np.exp(-x))
        self.out = out

        return out

    def backward(self, dout):
        dx = dout * (1.0 - self.out) * self.out

        return dx

# バッチ版Affineレイヤ
class Affine:
    def __init__(self, W, b):
        self.W = W      # 重み
        self.b = b      # バイアス
        self.x = None   # 入力
        self.dW = None  # 重みの微分値
        self.db = None  # バイアスの微分値

    def forward(self, x):
        self.x = x
        out = np.dot(x, self.W) + self.b

        return out

    def backward(self, dout):
        dx = np.dot(dout, self.W.T)
        self.dW = np.dot(self.x.T, dout)
        self.db = np.dot(dout, axis=0)

        return dx

#SoftmaxWithLossレイヤ
class SoftmaxWithLoss:
    def __init__(self):

        self.loss = None    # 損失
        self.y = None       # softmaxの出力
        self.t = None       # 教師データ（one-hot vector）

    def forward(self, x, t):
        self.t = t
        self.y = softmax(x)
        self.loss = cross_entropy_error(self.y, self.t)

        return self.loss

    def backward(self, dout=1):
        batch_size = self.t.shape[0]    # バッチの個数
        dx = (self.y - self.t) * (dout / batch_size)

        return dx

import os
os.chdir('__file名__')

# 誤差逆伝播法に対応した二層ニューラルネットワーク
import sys, os
sys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定
import numpy as np
from common.layers import *
from common.gradient import numerical_gradient
from collections import OrderedDict


class TwoLayerNet:

    #-------------------------------------------------
    # __init__:初期化を行う
    #     @self
    #     @input_size:入力層のニューロンの数
    #     @hidden_size:隠れ層のニューロンの数
    #     @output_size:出力層のニューロンの数
    #     @weight_init_std:重み初期化時のガウス分布スケール
    #-------------------------------------------------
    def __init__(self, input_size, hidden_size, output_size, weight_init_std = 0.01):


        # params:ニューラルネットのパラメータを保持する辞書型変数
        # 重みの初期化
        self.params = {}
        self.params['W1'] = weight_init_std * np.random.randn(input_size, hidden_size)
        self.params['b1'] = np.zeros(hidden_size)
        self.params['W2'] = weight_init_std * np.random.randn(hidden_size, output_size) 
        self.params['b2'] = np.zeros(output_size)

        # layer:ニューラルネットワークのレイヤを保持する「順序付き」辞書型変数
        # レイヤの生成:順序付きで保存しているのがポイント
        #           これにより順伝播ではそのまま、逆伝播では逆からレイヤを呼び出すだけでOK
        self.layers = OrderedDict()
        self.layers['Affine1'] = Affine(self.params['W1'], self.params['b1'])
        self.layers['Relu1'] = Relu()
        self.layers['Affine2'] = Affine(self.params['W2'], self.params['b2'])

        # ニューラルネットワークの最後のレイヤ:ここではSoftmaxWithLossレイヤ
        self.lastLayer = SoftmaxWithLoss()


    #-------------------------------------------------
    # predict:認識（推論）を行う
    #     @self
    #     @x:画像データ（入力データ）
    #-------------------------------------------------
    def predict(self, x):
        for layer in self.layers.values():
            x = layer.forward(x)

        return x


    #-------------------------------------------------
    # loss:損失関数を求める
    #     @self
    #     @x:画像データ（入力データ）
    #     @t:教師データ
    #-------------------------------------------------
    def loss(self, x, t):
        y = self.predict(x)
        return self.lastLayer.forward(y, t)


    #-------------------------------------------------
    # accuracy:認識精度を求める
    #     @self
    #     @x:画像データ（入力データ）
    #     @t:教師データ
    #-------------------------------------------------
    def accuracy(self, x, t):
        y = self.predict(x)
        y = np.argmax(y, axis=1)
        if t.ndim != 1 : t = np.argmax(t, axis=1)

        accuracy = np.sum(y == t) / float(x.shape[0])
        return accuracy


    #-------------------------------------------------
    # numerical_gradient:重みパラメータに対する勾配を数値微分によって求める（〜４章までと同様）
    #     @self
    #     @x:画像データ（入力データ）
    #     @t:教師データ
    #-------------------------------------------------
    def numerical_gradient(self, x, t):
        loss_W = lambda W: self.loss(x, t)

        grads = {}
        grads['W1'] = numerical_gradient(loss_W, self.params['W1'])
        grads['b1'] = numerical_gradient(loss_W, self.params['b1'])
        grads['W2'] = numerical_gradient(loss_W, self.params['W2'])
        grads['b2'] = numerical_gradient(loss_W, self.params['b2'])

        return grads


    #-------------------------------------------------
    # gradient:重みパラメータに対する勾配を誤差逆伝播法によって求める
    #     @self
    #     @x:画像データ（入力データ）
    #     @t:教師データ
    #-------------------------------------------------
    def gradient(self, x, t):

        # ポイント:実際にレイヤとして実装した伝播を動かしている

        # forward:順伝播
        self.loss(x, t)

        # backward:逆伝播
        dout = 1
        dout = self.lastLayer.backward(dout)

        layers = list(self.layers.values())
        layers.reverse()
        for layer in layers:
            dout = layer.backward(dout)

        # 設定(各レイヤの微分値の取り出し)
        grads = {}
        grads['W1'], grads['b1'] = self.layers['Affine1'].dW, self.layers['Affine1'].db
        grads['W2'], grads['b2'] = self.layers['Affine2'].dW, self.layers['Affine2'].db

        return grads


import os
os.chdir('__file名__')

import os
os.chdir('__file名__')

#勾配確認
import sys, os
sys.path.append(os.pardir)  # 親ディレクトリのファイルをインポートするための設定
import numpy as np
from dataset.mnist import load_mnist
from two_layer_net import TwoLayerNet


# MNISTの訓練データとテストデータ読み込み
(x_train, t_train), (x_test, t_test) = \
    load_mnist(normalize=True, one_hot_label=True)

# 2層のニューラルワーク生成
network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)

# 検証用のデータ準備
x_batch = x_train[:3]
t_batch = t_train[:3]

# 数値微分と誤差逆伝播法で勾配算出
grad_numerical = network.numerical_gradient(x_batch, t_batch)
grad_backprop = network.gradient(x_batch, t_batch)

# 各重みの差を確認
for key in grad_numerical.keys():
    diff =np.average(np.abs(grad_backprop[key] - grad_numerical[key]))
    print(key+":"+str(diff))

#誤差伝播法を使った学習
import sys, os
sys.path.append(os.pardir)

import numpy as np
from dataset.mnist import load_mnist
from two_layer_net import TwoLayerNet

# データの読み込み
(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)

network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)

iters_num = 10000
train_size = x_train.shape[0]
batch_size = 100
learning_rate = 0.1

train_loss_list = []
train_acc_list = []
test_acc_list = []

iter_per_epoch = max(train_size / batch_size, 1)

for i in range(iters_num):
    batch_mask = np.random.choice(train_size, batch_size)
    x_batch = x_train[batch_mask]
    t_batch = t_train[batch_mask]
    
    # 勾配　#これまでと違う点はここのみ
    #grad = network.numerical_gradient(x_batch, t_batch)
    grad = network.gradient(x_batch, t_batch)
    
    # 更新
    for key in ('W1', 'b1', 'W2', 'b2'):
        network.params[key] -= learning_rate * grad[key]
    
    loss = network.loss(x_batch, t_batch)
    train_loss_list.append(loss)
    
    if i % iter_per_epoch == 0:
        train_acc = network.accuracy(x_train, t_train)
        test_acc = network.accuracy(x_test, t_test)
        train_acc_list.append(train_acc)
        test_acc_list.append(test_acc)
        print(train_acc, test_acc)
